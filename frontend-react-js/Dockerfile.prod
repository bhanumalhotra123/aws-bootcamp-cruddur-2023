# Base Image ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Start with a Node.js image (version 16.18) to build our application.
FROM node:16.18 AS build

# Define some variables needed for our React app.
# These will be provided during the Docker build process.
ARG REACT_APP_BACKEND_URL
ARG REACT_APP_AWS_PROJECT_REGION
ARG REACT_APP_AWS_COGNITO_REGION
ARG REACT_APP_AWS_USER_POOLS_ID
ARG REACT_APP_CLIENT_ID

# Set environment variables using the values provided.
ENV REACT_APP_BACKEND_URL=$REACT_APP_BACKEND_URL
ENV REACT_APP_AWS_PROJECT_REGION=$REACT_APP_AWS_PROJECT_REGION
ENV REACT_APP_AWS_COGNITO_REGION=$REACT_APP_AWS_COGNITO_REGION
ENV REACT_APP_AWS_USER_POOLS_ID=$REACT_APP_AWS_USER_POOLS_ID
ENV REACT_APP_CLIENT_ID=$REACT_APP_CLIENT_ID

# Copy all files from the current directory into the Docker image.
COPY . ./frontend-react-js

# Set the working directory to our app's directory inside the image.
WORKDIR /frontend-react-js

# Install the dependencies specified in package.json.
RUN npm install

# Build the React app for production.
RUN npm run build

# New Base Image ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Use a lightweight Nginx image as the base for serving our built React app.
FROM nginx:1.23.3-alpine

# Copy the built React app from the Node.js build stage into the Nginx image.
COPY --from=build /frontend-react-js/build /usr/share/nginx/html

# Copy the Nginx configuration file from our application into the Nginx image.
COPY --from=build /frontend-react-js/nginx.conf /etc/nginx/nginx.conf

# Expose port 3000 to allow outside connections (not typically needed for Nginx).
EXPOSE 3000
