#!/usr/bin/env python3

# Import necessary modules
import os
import sys
import glob
import re
import time
import importlib

current_path = os.path.dirname(os.path.abspath(__file__))
parent_path = os.path.abspath(os.path.join(current_path, '..', '..','backend-flask'))
sys.path.append(parent_path)
from lib.db import db

# Function to get the timestamp of the last successful run from the database
def get_last_successful_run():
    sql = """
      SELECT last_successful_run
      FROM public.schema_information
      LIMIT 1
    """
    return int(db.query_value(sql,{},verbose=False))

# Function to update the timestamp of the last successful run in the database
def set_last_successful_run(value):
    sql = """
    UPDATE schema_information
    SET last_successful_run = %(last_successful_run)s
    """
    db.query_commit(sql,{'last_successful_run': value}, verbose=False)

# Get the timestamp of the last successful run
last_successful_run = get_last_successful_run()

# Define the path to the directory containing migration files
migrations_path = os.path.abspath(os.path.join(current_path, '..', '..','backend-flask','db','migrations'))

# Append the migrations path to the system path to be able to import migration modules from there
sys.path.append(migrations_path)

# Get a list of all migration files in the migrations directory
migration_files = glob.glob(f"{migrations_path}/*")

# Loop through each migration file
for migration_file in migration_files:
    # Get the filename of the migration file
    filename = os.path.basename(migration_file)
    
    # Extract the module name from the filename (without the extension)
    module_name = os.path.splitext(filename)[0]
    
    # Use regular expression to extract the timestamp from the filename
    match = re.match(r'^\d+', filename)
    
    # If a timestamp is found in the filename
    if match:
        # Get the timestamp as an integer
        file_time = int(match.group())
        
        # Check if the timestamp of the migration file is greater than or equal to the timestamp of the last successful run
        if last_successful_run < file_time:
            # Import the migration module dynamically
            mod = importlib.import_module(module_name)
            # Print a message indicating that the migration is being run
            print('===running migration: ',module_name)
            
            # Execute the migration function from the module
            mod.migration.migrate()
            

            # Update the timestamp of the last successful run to the current time
            timestamp = str(time.time()).replace(".","")
            last_successful_run = set_last_successful_run(timestamp)
